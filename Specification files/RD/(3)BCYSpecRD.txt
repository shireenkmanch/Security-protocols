// BCY protocol Formal Specification
// ****************************************
// Author: Shireen Kudukkil Manchingal
// Date: 17 Feb 2017


// Protocol specification
// ------------------------
// U : An identifier of the user
// V : An identifier of the service provider
// S : An identifier of the certification authority
// Kvd+ : V's public key for Diffie–Hellman key agreement
// Kvm+ : V's public key for MSR encryption
// KK : A key-encrypting key
// SK : A session key
// rU : A random nonce generated by U

// 1. V -> U : {V, Kvd+,Kvm+}Ks- 
//	U computes Y = {rU}Kvm+, KK={Kvd+}Ku-, SK = {rU}KK
// 2. U -> V : Y, {{U,Ku+}Ks-}rU
//	V computes rU ={Y}Kvm-, KK={Ku+}Kvd-, SK = {rU}KK
// 3. V -> U : {dataV}SK 
// 4. U -> V : {dataU}SK

// SKu = {Nu}{Kv2Pub}KuPriv 
// SKv = {Nu}{KuPub}Kv2Priv
// 1.Initial Assupmtions
// -----------------------
// a.Express U's possessions/knowledge at time t0
A1: U possess at[0] KuPriv;
A2: U possess at[0] KuPub;
A3: U possess at[0] Nu;
A4: U possess at[0] dataU;
A5: U possess at[0] KttpPub;
A6: U know at[0] (Zero possess at[0] Nu);
A7: U know at[0] (TTP possess at[0] KttpPriv);

// b.Express V's possessions/knowledge at time t0
A8: V possess at[0] Kv1Priv;
A9: V possess at[0] Kv2Priv;
A10: V possess at[0] Kv1Pub;
A11: V possess at[0] Kv2Pub;
A12: V possess at[0] dataV;
A13: V possess at[0] KttpPub;
A14: V know at[0] (TTP possess at[0] KttpPriv);

A15:	U know at[3] ((U possess at[3] {Nu,Nv}{Kv1Pub}KuPriv AND U know at[3] V possess at[3] Kv1Priv) IMPLY V possess at[3] {Nu,Nv}{Kv1Pub}KuPriv);
A16:	V know at[4] ((V possess at[4] {Nu,Nv}{KuPub}Kv1Priv AND V know at[4] U possess at[4] KuPriv) IMPLY U possess at[4] {Nu,Nv}{KuPub}Kv1Priv);

// ***************************************************************
// Protocol Steps
// ---------------
S1: U receivefrom V at[1] {V,Kv1Pub,Kv2Pub}KttpPriv;
S2: V receivefrom U at[2] {Nu}Kv2Pub,{{U,KuPub}KttpPriv}Nu;
S3: U receivefrom V at[3] {dataV}({Nu}({Kv1Pub}KuPriv));
S4: V receivefrom U at[4] {dataU}{Nu}{KuPub}Kv1Priv;


// ***************************************************************
// Protocol Goals
// ---------------
// Binding of V's public keys for U (both will fail)
G1:	U know at[1] V possess at[1] Kv1Priv;
G2:	U know at[1] V possess at[1] Kv2Priv;
	// U's possession of V's public keys
G3:	U possess at[1] Kv1Pub,Kv2Pub;
	// U's possession of key encryption key KK
G4:	U possess at[1] {Kv1Pub}KuPriv;
	// U's possession of session key SK = {Nu}KK
G5:	U possess at[1] {Nu}{Kv1Pub}KuPriv;
	// U's knowledge of freshness of SK 
G6:	U know at[1] (not(Zero possess at[0] {Nu}{Kv1Pub}KuPriv));

		// Binding of U's public key for V (will fail)
G7:		V know at[2] U possess at[2] KuPriv;
		// V's possession of U's public key
G8:		V possess at[2] KuPub;
		// V's possession of key encryption key KK
G9:		V possess at[2] {KuPub}Kv1Priv;
		// V's possession of session key SK = {Nu}KK
G10:	V possess at[2] {Nu}{KuPub}Kv1Priv;
		// V's knowledge of freshness of SK (will fail)
G11:	V know at[2] (not(Zero possess at[0] {Nu}{KuPub}Kv1Priv));

		// authentication of V to U: U knows message S3 has been send 
		// by V during current protocol run (G13 will fail)
G12:	U know at[3] not(Zero send at[0] {dataV}{Nu}{Kv1Pub}KuPriv);
G13:	U know at[3] V send at[3] {dataV}{Nu}{Kv1Pub}KuPriv;

		// authentication of U to V: V knows message S3 has been send 
		// by U during current protocol run (both will fail)
G14:	V know at[4] not(Zero send at[0] {dataU}{Nu}{KuPub}Kv1Priv);
G15:	V know at[4] U send at[4] {dataU}{Nu}{KuPub}Kv1Priv;
